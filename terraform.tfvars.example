# =============================================================================
# GKE Platform Infrastructure - Terraform Variables Example
# =============================================================================
# Copy this file to terraform.tfvars and fill in your values
# cp terraform.tfvars.example terraform.tfvars
#
# IMPORTANT: Never commit terraform.tfvars with sensitive data to git!
# Add terraform.tfvars to .gitignore if it contains secrets.
# =============================================================================

# -----------------------------------------------------------------------------
# Project Configuration
# -----------------------------------------------------------------------------
project_id = "your-gcp-project-id"
region     = "europe-west1"
zone       = "europe-west1-b"

# -----------------------------------------------------------------------------
# Domain Configuration
# -----------------------------------------------------------------------------
domain_name           = "yourdomain.com"        # Base domain for all services
monitoring_subdomain  = "monitoring"            # Creates monitoring.yourdomain.com
argocd_subdomain      = "argocd"               # Creates argocd.yourdomain.com
vault_subdomain       = "vault"                # Creates vault.yourdomain.com

# -----------------------------------------------------------------------------
# GitHub/Repository Configuration
# -----------------------------------------------------------------------------
github_org = "your-github-org"  # Your GitHub organization or username

# -----------------------------------------------------------------------------
# Network Configuration
# -----------------------------------------------------------------------------
network_name = "k8s-platform-vpc"

# -----------------------------------------------------------------------------
# GKE Cluster Configuration
# -----------------------------------------------------------------------------
cluster_name = "k8s-platform-cluster"

# Master authorized networks (empty = private, VPC-only access)
# Add your IP or VPN CIDR to allow external access
master_authorized_networks = []
# Example with VPN access:
# master_authorized_networks = [
#   {
#     cidr_block   = "10.0.0.0/20"
#     display_name = "VPC Internal"
#   }
# ]

# -----------------------------------------------------------------------------
# PostgreSQL Database Configuration
# -----------------------------------------------------------------------------
postgres_instance_name     = "k8s-platform-postgres"
postgres_version           = "POSTGRES_17"
postgres_tier              = "db-custom-2-7680"  # 2 vCPUs, 7.5GB RAM
postgres_availability_type = "REGIONAL"          # High availability
postgres_disk_size         = 20                  # GB

# Database users (will create secrets in Secret Manager)
application_db_username = "application"

# Databases to create
databases = ["product-service", "user-service", "order-service"]

# Database users to create (passwords stored in Secret Manager)
users = ["product-user", "user-user", "order-user"]

# Backup configuration
backup_region = "europe-west4"  # Different region for disaster recovery

# -----------------------------------------------------------------------------
# DNS Configuration
# -----------------------------------------------------------------------------
dns_zone_name     = "platform-internal"
dns_zone_domain   = "platform.internal."
database_dns_name = "postgresql.platform.internal."

# -----------------------------------------------------------------------------
# ArgoCD Configuration
# -----------------------------------------------------------------------------
# ArgoCD URL (defaults to argocd.{domain_name} if not specified)
# argocd_url = "argocd.yourdomain.com"

# REQUIRED: ArgoCD server secret key for JWT signing and session management
# Generate with: openssl rand -base64 32
argocd_server_secret_key = ""  # REQUIRED - 32+ character random string

# GitHub OAuth for ArgoCD (optional - for SSO login)
argocd_github_client_id     = ""  # GitHub OAuth App Client ID
argocd_github_client_secret = ""  # GitHub OAuth App Client Secret (keep secure!)
argocd_github_org           = ""  # GitHub org for ArgoCD access (uses github_org if empty)

# GitHub App for ArgoCD Applications (optional - for private repo access)
# Create a GitHub App with repository read access
github_app_id              = ""  # GitHub App ID
github_app_installation_id = ""  # GitHub App Installation ID
github_app_private_key     = ""  # GitHub App Private Key (PEM format, multiline)

# App of Apps Configuration (optional - for GitOps-style app management)
# Leave empty to manage applications directly with Terraform
platform_app_of_apps_repo_url = ""  # e.g., "https://github.com/your-org/platform-config"

# Platform Applications (optional - for direct Terraform management)
# Leave empty if using app-of-apps pattern
# platform_applications = {}
# Example:
# platform_applications = {
#   "my-app" = {
#     name            = "my-app"
#     repo_url        = "https://github.com/your-org/my-app"
#     path            = "k8s/"
#     target_revision = "main"
#     destination = {
#       namespace = "platform"
#     }
#     sync_policy = {
#       automated = {
#         prune     = true
#         self_heal = true
#       }
#     }
#   }
# }

# -----------------------------------------------------------------------------
# Vault Configuration
# -----------------------------------------------------------------------------
enable_vault = true  # Set to false to disable Vault deployment

# Vault root token (REQUIRED if enable_vault = true)
# Generate with: openssl rand -base64 32
# This is used for initial Vault configuration only
vault_root_token = ""  # Keep this VERY secure! Used for Vault configuration

# -----------------------------------------------------------------------------
# Storage Configuration
# -----------------------------------------------------------------------------
bucket_name = "your-storage-bucket-name"
# Note: Service account for storage access is automatically created by the storage module

# -----------------------------------------------------------------------------
# Security Notes
# -----------------------------------------------------------------------------
# 1. Never commit terraform.tfvars with sensitive data (API tokens, passwords)
# 2. Use environment variables (TF_VAR_*) for secrets in CI/CD
# 3. Database passwords are auto-generated and stored in Secret Manager
# 4. Add terraform.tfvars to .gitignore if it contains sensitive values
# 5. Use separate tfvars files for different environments:
#    - terraform.tfvars.dev
#    - terraform.tfvars.staging
#    - terraform.tfvars.prod
# =============================================================================
